//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MediaLibrary {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RecordingDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RecordingDataSet : global::System.Data.DataSet {
        
        private ArtistsDataTable tableArtists;
        
        private GenresDataTable tableGenres;
        
        private LabelsDataTable tableLabels;
        
        private RecordingsDataTable tableRecordings;
        
        private ReviewsDataTable tableReviews;
        
        private ReviewersDataTable tableReviewers;
        
        private TracksDataTable tableTracks;
        
        private global::System.Data.DataRelation relationTrackOfTheRecording;
        
        private global::System.Data.DataRelation relationGenreOfTheTrack;
        
        private global::System.Data.DataRelation relationArtistOfTheTrack;
        
        private global::System.Data.DataRelation relationArtistOfTheRecording;
        
        private global::System.Data.DataRelation relationLabelOfTheRecording;
        
        private global::System.Data.DataRelation relationReviewerOfTheRecording;
        
        private global::System.Data.DataRelation relationReviewsOfTheRecording;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RecordingDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RecordingDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Artist"] != null)) {
                    base.Tables.Add(new ArtistsDataTable(ds.Tables["Artist"]));
                }
                if ((ds.Tables["Genre"] != null)) {
                    base.Tables.Add(new GenresDataTable(ds.Tables["Genre"]));
                }
                if ((ds.Tables["Label"] != null)) {
                    base.Tables.Add(new LabelsDataTable(ds.Tables["Label"]));
                }
                if ((ds.Tables["Recording"] != null)) {
                    base.Tables.Add(new RecordingsDataTable(ds.Tables["Recording"]));
                }
                if ((ds.Tables["Review"] != null)) {
                    base.Tables.Add(new ReviewsDataTable(ds.Tables["Review"]));
                }
                if ((ds.Tables["Reviewer"] != null)) {
                    base.Tables.Add(new ReviewersDataTable(ds.Tables["Reviewer"]));
                }
                if ((ds.Tables["Track"] != null)) {
                    base.Tables.Add(new TracksDataTable(ds.Tables["Track"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ArtistsDataTable Artists {
            get {
                return this.tableArtists;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GenresDataTable Genres {
            get {
                return this.tableGenres;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LabelsDataTable Labels {
            get {
                return this.tableLabels;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecordingsDataTable Recordings {
            get {
                return this.tableRecordings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReviewsDataTable Reviews {
            get {
                return this.tableReviews;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReviewersDataTable Reviewers {
            get {
                return this.tableReviewers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TracksDataTable Tracks {
            get {
                return this.tableTracks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RecordingDataSet cln = ((RecordingDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Artist"] != null)) {
                    base.Tables.Add(new ArtistsDataTable(ds.Tables["Artist"]));
                }
                if ((ds.Tables["Genre"] != null)) {
                    base.Tables.Add(new GenresDataTable(ds.Tables["Genre"]));
                }
                if ((ds.Tables["Label"] != null)) {
                    base.Tables.Add(new LabelsDataTable(ds.Tables["Label"]));
                }
                if ((ds.Tables["Recording"] != null)) {
                    base.Tables.Add(new RecordingsDataTable(ds.Tables["Recording"]));
                }
                if ((ds.Tables["Review"] != null)) {
                    base.Tables.Add(new ReviewsDataTable(ds.Tables["Review"]));
                }
                if ((ds.Tables["Reviewer"] != null)) {
                    base.Tables.Add(new ReviewersDataTable(ds.Tables["Reviewer"]));
                }
                if ((ds.Tables["Track"] != null)) {
                    base.Tables.Add(new TracksDataTable(ds.Tables["Track"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableArtists = ((ArtistsDataTable)(base.Tables["Artist"]));
            if ((initTable == true)) {
                if ((this.tableArtists != null)) {
                    this.tableArtists.InitVars();
                }
            }
            this.tableGenres = ((GenresDataTable)(base.Tables["Genre"]));
            if ((initTable == true)) {
                if ((this.tableGenres != null)) {
                    this.tableGenres.InitVars();
                }
            }
            this.tableLabels = ((LabelsDataTable)(base.Tables["Label"]));
            if ((initTable == true)) {
                if ((this.tableLabels != null)) {
                    this.tableLabels.InitVars();
                }
            }
            this.tableRecordings = ((RecordingsDataTable)(base.Tables["Recording"]));
            if ((initTable == true)) {
                if ((this.tableRecordings != null)) {
                    this.tableRecordings.InitVars();
                }
            }
            this.tableReviews = ((ReviewsDataTable)(base.Tables["Review"]));
            if ((initTable == true)) {
                if ((this.tableReviews != null)) {
                    this.tableReviews.InitVars();
                }
            }
            this.tableReviewers = ((ReviewersDataTable)(base.Tables["Reviewer"]));
            if ((initTable == true)) {
                if ((this.tableReviewers != null)) {
                    this.tableReviewers.InitVars();
                }
            }
            this.tableTracks = ((TracksDataTable)(base.Tables["Track"]));
            if ((initTable == true)) {
                if ((this.tableTracks != null)) {
                    this.tableTracks.InitVars();
                }
            }
            this.relationTrackOfTheRecording = this.Relations["TrackOfTheRecording"];
            this.relationGenreOfTheTrack = this.Relations["GenreOfTheTrack"];
            this.relationArtistOfTheTrack = this.Relations["ArtistOfTheTrack"];
            this.relationArtistOfTheRecording = this.Relations["ArtistOfTheRecording"];
            this.relationLabelOfTheRecording = this.Relations["LabelOfTheRecording"];
            this.relationReviewerOfTheRecording = this.Relations["ReviewerOfTheRecording"];
            this.relationReviewsOfTheRecording = this.Relations["ReviewsOfTheRecording"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RecordingDataSet";
            this.Prefix = "";
            this.Namespace = "http://nunit.org/book/RecordingDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableArtists = new ArtistsDataTable();
            base.Tables.Add(this.tableArtists);
            this.tableGenres = new GenresDataTable();
            base.Tables.Add(this.tableGenres);
            this.tableLabels = new LabelsDataTable();
            base.Tables.Add(this.tableLabels);
            this.tableRecordings = new RecordingsDataTable();
            base.Tables.Add(this.tableRecordings);
            this.tableReviews = new ReviewsDataTable();
            base.Tables.Add(this.tableReviews);
            this.tableReviewers = new ReviewersDataTable();
            base.Tables.Add(this.tableReviewers);
            this.tableTracks = new TracksDataTable();
            base.Tables.Add(this.tableTracks);
            this.relationTrackOfTheRecording = new global::System.Data.DataRelation("TrackOfTheRecording", new global::System.Data.DataColumn[] {
                        this.tableRecordings.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTracks.RecordingIdColumn}, false);
            this.Relations.Add(this.relationTrackOfTheRecording);
            this.relationGenreOfTheTrack = new global::System.Data.DataRelation("GenreOfTheTrack", new global::System.Data.DataColumn[] {
                        this.tableGenres.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTracks.GenreIdColumn}, false);
            this.Relations.Add(this.relationGenreOfTheTrack);
            this.relationArtistOfTheTrack = new global::System.Data.DataRelation("ArtistOfTheTrack", new global::System.Data.DataColumn[] {
                        this.tableArtists.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTracks.ArtistIdColumn}, false);
            this.Relations.Add(this.relationArtistOfTheTrack);
            this.relationArtistOfTheRecording = new global::System.Data.DataRelation("ArtistOfTheRecording", new global::System.Data.DataColumn[] {
                        this.tableArtists.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings.ArtistIdColumn}, false);
            this.Relations.Add(this.relationArtistOfTheRecording);
            this.relationLabelOfTheRecording = new global::System.Data.DataRelation("LabelOfTheRecording", new global::System.Data.DataColumn[] {
                        this.tableLabels.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRecordings.LabelIdColumn}, false);
            this.Relations.Add(this.relationLabelOfTheRecording);
            this.relationReviewerOfTheRecording = new global::System.Data.DataRelation("ReviewerOfTheRecording", new global::System.Data.DataColumn[] {
                        this.tableReviewers.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableReviews.ReviewerIdColumn}, false);
            this.Relations.Add(this.relationReviewerOfTheRecording);
            this.relationReviewsOfTheRecording = new global::System.Data.DataRelation("ReviewsOfTheRecording", new global::System.Data.DataColumn[] {
                        this.tableRecordings.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableReviews.RecordingIdColumn}, false);
            this.Relations.Add(this.relationReviewsOfTheRecording);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeArtists() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGenres() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLabels() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecordings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReviews() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReviewers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTracks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RecordingDataSet ds = new RecordingDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ArtistChangeEventHandler(object sender, ArtistChangeEvent e);
        
        public delegate void GenreChangeEventHandler(object sender, GenreChangeEvent e);
        
        public delegate void LabelChangeEventHandler(object sender, LabelChangeEvent e);
        
        public delegate void RecordingChangeEventHandler(object sender, RecordingChangeEvent e);
        
        public delegate void ReviewChangeEventHandler(object sender, ReviewChangeEvent e);
        
        public delegate void ReviewerChangeEventHandler(object sender, ReviewerChangeEvent e);
        
        public delegate void TrackChangeEventHandler(object sender, TrackChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ArtistsDataTable : global::System.Data.TypedTableBase<Artist> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtistsDataTable() {
                this.TableName = "Artist";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArtistsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ArtistsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Artist this[int index] {
                get {
                    return ((Artist)(this.Rows[index]));
                }
            }
            
            public event ArtistChangeEventHandler ArtistChanging;
            
            public event ArtistChangeEventHandler ArtistChanged;
            
            public event ArtistChangeEventHandler ArtistDeleting;
            
            public event ArtistChangeEventHandler ArtistDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddArtist(Artist row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Artist AddArtist(long Id, string Name) {
                Artist rowArtist = ((Artist)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        Name};
                rowArtist.ItemArray = columnValuesArray;
                this.Rows.Add(rowArtist);
                return rowArtist;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Artist FindById(long Id) {
                return ((Artist)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ArtistsDataTable cln = ((ArtistsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ArtistsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["id"];
                this.columnName = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("id", typeof(long), null, global::System.Data.MappingType.Element);
                this.columnId.ExtendedProperties.Add("typedName", "Id");
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnName.ExtendedProperties.Add("typedName", "Name");
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ArtistPK", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.ExtendedProperties.Add("typedName", "Artist");
                this.ExtendedProperties.Add("typedPlural", "Artists");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Artist NewArtist() {
                return ((Artist)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Artist(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Artist);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ArtistChanged != null)) {
                    this.ArtistChanged(this, new ArtistChangeEvent(((Artist)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ArtistChanging != null)) {
                    this.ArtistChanging(this, new ArtistChangeEvent(((Artist)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ArtistDeleted != null)) {
                    this.ArtistDeleted(this, new ArtistChangeEvent(((Artist)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ArtistDeleting != null)) {
                    this.ArtistDeleting(this, new ArtistChangeEvent(((Artist)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveArtist(Artist row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RecordingDataSet ds = new RecordingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ArtistsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GenresDataTable : global::System.Data.TypedTableBase<Genre> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenresDataTable() {
                this.TableName = "Genre";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GenresDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GenresDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Genre this[int index] {
                get {
                    return ((Genre)(this.Rows[index]));
                }
            }
            
            public event GenreChangeEventHandler GenreChanging;
            
            public event GenreChangeEventHandler GenreChanged;
            
            public event GenreChangeEventHandler GenreDeleting;
            
            public event GenreChangeEventHandler GenreDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGenre(Genre row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Genre AddGenre(long Id, string Name) {
                Genre rowGenre = ((Genre)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        Name};
                rowGenre.ItemArray = columnValuesArray;
                this.Rows.Add(rowGenre);
                return rowGenre;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Genre FindById(long Id) {
                return ((Genre)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GenresDataTable cln = ((GenresDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GenresDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["id"];
                this.columnName = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("id", typeof(long), null, global::System.Data.MappingType.Element);
                this.columnId.ExtendedProperties.Add("typedName", "Id");
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnName.ExtendedProperties.Add("typedName", "Name");
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("GenrePK", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.ExtendedProperties.Add("typedName", "Genre");
                this.ExtendedProperties.Add("typedPlural", "Genres");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Genre NewGenre() {
                return ((Genre)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Genre(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Genre);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GenreChanged != null)) {
                    this.GenreChanged(this, new GenreChangeEvent(((Genre)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GenreChanging != null)) {
                    this.GenreChanging(this, new GenreChangeEvent(((Genre)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GenreDeleted != null)) {
                    this.GenreDeleted(this, new GenreChangeEvent(((Genre)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GenreDeleting != null)) {
                    this.GenreDeleting(this, new GenreChangeEvent(((Genre)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGenre(Genre row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RecordingDataSet ds = new RecordingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GenresDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LabelsDataTable : global::System.Data.TypedTableBase<Label> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelsDataTable() {
                this.TableName = "Label";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LabelsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LabelsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Label this[int index] {
                get {
                    return ((Label)(this.Rows[index]));
                }
            }
            
            public event LabelChangeEventHandler LabelChanging;
            
            public event LabelChangeEventHandler LabelChanged;
            
            public event LabelChangeEventHandler LabelDeleting;
            
            public event LabelChangeEventHandler LabelDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLabel(Label row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Label AddLabel(long Id, string Name) {
                Label rowLabel = ((Label)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        Name};
                rowLabel.ItemArray = columnValuesArray;
                this.Rows.Add(rowLabel);
                return rowLabel;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Label FindById(long Id) {
                return ((Label)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LabelsDataTable cln = ((LabelsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LabelsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["id"];
                this.columnName = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("id", typeof(long), null, global::System.Data.MappingType.Element);
                this.columnId.ExtendedProperties.Add("typedName", "Id");
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnName.ExtendedProperties.Add("typedName", "Name");
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("LabelPK", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.ExtendedProperties.Add("typedName", "Label");
                this.ExtendedProperties.Add("typedPlural", "Labels");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Label NewLabel() {
                return ((Label)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Label(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Label);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LabelChanged != null)) {
                    this.LabelChanged(this, new LabelChangeEvent(((Label)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LabelChanging != null)) {
                    this.LabelChanging(this, new LabelChangeEvent(((Label)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LabelDeleted != null)) {
                    this.LabelDeleted(this, new LabelChangeEvent(((Label)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LabelDeleting != null)) {
                    this.LabelDeleting(this, new LabelChangeEvent(((Label)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLabel(Label row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RecordingDataSet ds = new RecordingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LabelsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RecordingsDataTable : global::System.Data.TypedTableBase<Recording> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnReleaseDate;
            
            private global::System.Data.DataColumn columnLabelId;
            
            private global::System.Data.DataColumn columnArtistId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingsDataTable() {
                this.TableName = "Recording";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecordingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RecordingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReleaseDateColumn {
                get {
                    return this.columnReleaseDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelIdColumn {
                get {
                    return this.columnLabelId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArtistIdColumn {
                get {
                    return this.columnArtistId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recording this[int index] {
                get {
                    return ((Recording)(this.Rows[index]));
                }
            }
            
            public event RecordingChangeEventHandler RecordingChanging;
            
            public event RecordingChangeEventHandler RecordingChanged;
            
            public event RecordingChangeEventHandler RecordingDeleting;
            
            public event RecordingChangeEventHandler RecordingDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecording(Recording row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recording AddRecording(long Id, string Title, System.DateTime ReleaseDate, Label parentLabelByLabelOfTheRecording, Artist parentArtistByArtistOfTheRecording) {
                Recording rowRecording = ((Recording)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        Title,
                        ReleaseDate,
                        null,
                        null};
                if ((parentLabelByLabelOfTheRecording != null)) {
                    columnValuesArray[3] = parentLabelByLabelOfTheRecording[0];
                }
                if ((parentArtistByArtistOfTheRecording != null)) {
                    columnValuesArray[4] = parentArtistByArtistOfTheRecording[0];
                }
                rowRecording.ItemArray = columnValuesArray;
                this.Rows.Add(rowRecording);
                return rowRecording;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recording FindById(long Id) {
                return ((Recording)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RecordingsDataTable cln = ((RecordingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RecordingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["id"];
                this.columnTitle = base.Columns["title"];
                this.columnReleaseDate = base.Columns["releasedate"];
                this.columnLabelId = base.Columns["labelid"];
                this.columnArtistId = base.Columns["artistid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("id", typeof(long), null, global::System.Data.MappingType.Element);
                this.columnId.ExtendedProperties.Add("typedName", "Id");
                base.Columns.Add(this.columnId);
                this.columnTitle = new global::System.Data.DataColumn("title", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnTitle.ExtendedProperties.Add("typedName", "Title");
                base.Columns.Add(this.columnTitle);
                this.columnReleaseDate = new global::System.Data.DataColumn("releasedate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                this.columnReleaseDate.ExtendedProperties.Add("typedName", "ReleaseDate");
                base.Columns.Add(this.columnReleaseDate);
                this.columnLabelId = new global::System.Data.DataColumn("labelid", typeof(long), null, global::System.Data.MappingType.Element);
                this.columnLabelId.ExtendedProperties.Add("typedName", "LabelId");
                base.Columns.Add(this.columnLabelId);
                this.columnArtistId = new global::System.Data.DataColumn("artistid", typeof(long), null, global::System.Data.MappingType.Element);
                this.columnArtistId.ExtendedProperties.Add("typedName", "ArtistId");
                base.Columns.Add(this.columnArtistId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("RecordingPK", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnTitle.AllowDBNull = false;
                this.columnReleaseDate.AllowDBNull = false;
                this.columnLabelId.AllowDBNull = false;
                this.columnArtistId.AllowDBNull = false;
                this.ExtendedProperties.Add("typedName", "Recording");
                this.ExtendedProperties.Add("typedPlural", "Recordings");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recording NewRecording() {
                return ((Recording)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Recording(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Recording);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecordingChanged != null)) {
                    this.RecordingChanged(this, new RecordingChangeEvent(((Recording)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecordingChanging != null)) {
                    this.RecordingChanging(this, new RecordingChangeEvent(((Recording)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecordingDeleted != null)) {
                    this.RecordingDeleted(this, new RecordingChangeEvent(((Recording)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecordingDeleting != null)) {
                    this.RecordingDeleting(this, new RecordingChangeEvent(((Recording)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecording(Recording row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RecordingDataSet ds = new RecordingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecordingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReviewsDataTable : global::System.Data.TypedTableBase<Review> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnReviewerId;
            
            private global::System.Data.DataColumn columnRecordingId;
            
            private global::System.Data.DataColumn columnRating;
            
            private global::System.Data.DataColumn columnContent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReviewsDataTable() {
                this.TableName = "Review";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReviewsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReviewsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReviewerIdColumn {
                get {
                    return this.columnReviewerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordingIdColumn {
                get {
                    return this.columnRecordingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RatingColumn {
                get {
                    return this.columnRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContentColumn {
                get {
                    return this.columnContent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Review this[int index] {
                get {
                    return ((Review)(this.Rows[index]));
                }
            }
            
            public event ReviewChangeEventHandler ReviewChanging;
            
            public event ReviewChangeEventHandler ReviewChanged;
            
            public event ReviewChangeEventHandler ReviewDeleting;
            
            public event ReviewChangeEventHandler ReviewDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReview(Review row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Review AddReview(long Id, Reviewer parentReviewerByReviewerOfTheRecording, Recording parentRecordingByReviewsOfTheRecording, int Rating, string Content) {
                Review rowReview = ((Review)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        null,
                        null,
                        Rating,
                        Content};
                if ((parentReviewerByReviewerOfTheRecording != null)) {
                    columnValuesArray[1] = parentReviewerByReviewerOfTheRecording[0];
                }
                if ((parentRecordingByReviewsOfTheRecording != null)) {
                    columnValuesArray[2] = parentRecordingByReviewsOfTheRecording[0];
                }
                rowReview.ItemArray = columnValuesArray;
                this.Rows.Add(rowReview);
                return rowReview;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Review FindById(long Id) {
                return ((Review)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ReviewsDataTable cln = ((ReviewsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ReviewsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["id"];
                this.columnReviewerId = base.Columns["reviewerid"];
                this.columnRecordingId = base.Columns["recordingid"];
                this.columnRating = base.Columns["rating"];
                this.columnContent = base.Columns["review"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("id", typeof(long), null, global::System.Data.MappingType.Element);
                this.columnId.ExtendedProperties.Add("typedName", "Id");
                base.Columns.Add(this.columnId);
                this.columnReviewerId = new global::System.Data.DataColumn("reviewerid", typeof(long), null, global::System.Data.MappingType.Element);
                this.columnReviewerId.ExtendedProperties.Add("typedName", "ReviewerId");
                base.Columns.Add(this.columnReviewerId);
                this.columnRecordingId = new global::System.Data.DataColumn("recordingid", typeof(long), null, global::System.Data.MappingType.Element);
                this.columnRecordingId.ExtendedProperties.Add("typedName", "RecordingId");
                base.Columns.Add(this.columnRecordingId);
                this.columnRating = new global::System.Data.DataColumn("rating", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnRating.ExtendedProperties.Add("typedName", "Rating");
                base.Columns.Add(this.columnRating);
                this.columnContent = new global::System.Data.DataColumn("review", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnContent.ExtendedProperties.Add("typedName", "Content");
                base.Columns.Add(this.columnContent);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ReviewPK", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnRating.AllowDBNull = false;
                this.ExtendedProperties.Add("typedName", "Review");
                this.ExtendedProperties.Add("typedPlural", "Reviews");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Review NewReview() {
                return ((Review)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Review(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Review);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReviewChanged != null)) {
                    this.ReviewChanged(this, new ReviewChangeEvent(((Review)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReviewChanging != null)) {
                    this.ReviewChanging(this, new ReviewChangeEvent(((Review)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReviewDeleted != null)) {
                    this.ReviewDeleted(this, new ReviewChangeEvent(((Review)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReviewDeleting != null)) {
                    this.ReviewDeleting(this, new ReviewChangeEvent(((Review)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReview(Review row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RecordingDataSet ds = new RecordingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReviewsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReviewersDataTable : global::System.Data.TypedTableBase<Reviewer> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReviewersDataTable() {
                this.TableName = "Reviewer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReviewersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReviewersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Reviewer this[int index] {
                get {
                    return ((Reviewer)(this.Rows[index]));
                }
            }
            
            public event ReviewerChangeEventHandler ReviewerChanging;
            
            public event ReviewerChangeEventHandler ReviewerChanged;
            
            public event ReviewerChangeEventHandler ReviewerDeleting;
            
            public event ReviewerChangeEventHandler ReviewerDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReviewer(Reviewer row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Reviewer AddReviewer(long Id, string Name) {
                Reviewer rowReviewer = ((Reviewer)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        Name};
                rowReviewer.ItemArray = columnValuesArray;
                this.Rows.Add(rowReviewer);
                return rowReviewer;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Reviewer FindById(long Id) {
                return ((Reviewer)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ReviewersDataTable cln = ((ReviewersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ReviewersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["id"];
                this.columnName = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("id", typeof(long), null, global::System.Data.MappingType.Element);
                this.columnId.ExtendedProperties.Add("typedName", "Id");
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnName.ExtendedProperties.Add("typedName", "Name");
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ReviewerPK", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.ExtendedProperties.Add("typedName", "Reviewer");
                this.ExtendedProperties.Add("typedPlural", "Reviewers");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Reviewer NewReviewer() {
                return ((Reviewer)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Reviewer(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Reviewer);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReviewerChanged != null)) {
                    this.ReviewerChanged(this, new ReviewerChangeEvent(((Reviewer)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReviewerChanging != null)) {
                    this.ReviewerChanging(this, new ReviewerChangeEvent(((Reviewer)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReviewerDeleted != null)) {
                    this.ReviewerDeleted(this, new ReviewerChangeEvent(((Reviewer)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReviewerDeleting != null)) {
                    this.ReviewerDeleting(this, new ReviewerChangeEvent(((Reviewer)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReviewer(Reviewer row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RecordingDataSet ds = new RecordingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReviewersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TracksDataTable : global::System.Data.TypedTableBase<Track> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnDuration;
            
            private global::System.Data.DataColumn columnGenreId;
            
            private global::System.Data.DataColumn columnArtistId;
            
            private global::System.Data.DataColumn columnRecordingId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TracksDataTable() {
                this.TableName = "Track";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TracksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TracksDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DurationColumn {
                get {
                    return this.columnDuration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenreIdColumn {
                get {
                    return this.columnGenreId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArtistIdColumn {
                get {
                    return this.columnArtistId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordingIdColumn {
                get {
                    return this.columnRecordingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Track this[int index] {
                get {
                    return ((Track)(this.Rows[index]));
                }
            }
            
            public event TrackChangeEventHandler TrackChanging;
            
            public event TrackChangeEventHandler TrackChanged;
            
            public event TrackChangeEventHandler TrackDeleting;
            
            public event TrackChangeEventHandler TrackDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTrack(Track row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Track AddTrack(long Id, string Title, int Duration, Genre parentGenreByGenreOfTheTrack, Artist parentArtistByArtistOfTheTrack, Recording parentRecordingByTrackOfTheRecording) {
                Track rowTrack = ((Track)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        Title,
                        Duration,
                        null,
                        null,
                        null};
                if ((parentGenreByGenreOfTheTrack != null)) {
                    columnValuesArray[3] = parentGenreByGenreOfTheTrack[0];
                }
                if ((parentArtistByArtistOfTheTrack != null)) {
                    columnValuesArray[4] = parentArtistByArtistOfTheTrack[0];
                }
                if ((parentRecordingByTrackOfTheRecording != null)) {
                    columnValuesArray[5] = parentRecordingByTrackOfTheRecording[0];
                }
                rowTrack.ItemArray = columnValuesArray;
                this.Rows.Add(rowTrack);
                return rowTrack;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Track FindById(long Id) {
                return ((Track)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TracksDataTable cln = ((TracksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TracksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["id"];
                this.columnTitle = base.Columns["title"];
                this.columnDuration = base.Columns["duration"];
                this.columnGenreId = base.Columns["genreid"];
                this.columnArtistId = base.Columns["artistid"];
                this.columnRecordingId = base.Columns["recordingid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("id", typeof(long), null, global::System.Data.MappingType.Element);
                this.columnId.ExtendedProperties.Add("typedName", "Id");
                base.Columns.Add(this.columnId);
                this.columnTitle = new global::System.Data.DataColumn("title", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnTitle.ExtendedProperties.Add("typedName", "Title");
                base.Columns.Add(this.columnTitle);
                this.columnDuration = new global::System.Data.DataColumn("duration", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnDuration.ExtendedProperties.Add("typedName", "Duration");
                base.Columns.Add(this.columnDuration);
                this.columnGenreId = new global::System.Data.DataColumn("genreid", typeof(long), null, global::System.Data.MappingType.Element);
                this.columnGenreId.ExtendedProperties.Add("typedName", "GenreId");
                base.Columns.Add(this.columnGenreId);
                this.columnArtistId = new global::System.Data.DataColumn("artistid", typeof(long), null, global::System.Data.MappingType.Element);
                this.columnArtistId.ExtendedProperties.Add("typedName", "ArtistId");
                base.Columns.Add(this.columnArtistId);
                this.columnRecordingId = new global::System.Data.DataColumn("recordingid", typeof(long), null, global::System.Data.MappingType.Element);
                this.columnRecordingId.ExtendedProperties.Add("typedName", "RecordingId");
                base.Columns.Add(this.columnRecordingId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("TrackPK", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnTitle.AllowDBNull = false;
                this.columnDuration.AllowDBNull = false;
                this.ExtendedProperties.Add("typedName", "Track");
                this.ExtendedProperties.Add("typedPlural", "Tracks");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Track NewTrack() {
                return ((Track)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Track(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Track);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TrackChanged != null)) {
                    this.TrackChanged(this, new TrackChangeEvent(((Track)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TrackChanging != null)) {
                    this.TrackChanging(this, new TrackChangeEvent(((Track)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TrackDeleted != null)) {
                    this.TrackDeleted(this, new TrackChangeEvent(((Track)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TrackDeleting != null)) {
                    this.TrackDeleting(this, new TrackChangeEvent(((Track)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTrack(Track row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RecordingDataSet ds = new RecordingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TracksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Artist : global::System.Data.DataRow {
            
            private ArtistsDataTable tableArtists;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Artist(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableArtists = ((ArtistsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Id {
                get {
                    return ((long)(this[this.tableArtists.IdColumn]));
                }
                set {
                    this[this.tableArtists.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableArtists.NameColumn]));
                }
                set {
                    this[this.tableArtists.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Track[] GetTracks() {
                if ((this.Table.ChildRelations["ArtistOfTheTrack"] == null)) {
                    return new Track[0];
                }
                else {
                    return ((Track[])(base.GetChildRows(this.Table.ChildRelations["ArtistOfTheTrack"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recording[] GetRecordings() {
                if ((this.Table.ChildRelations["ArtistOfTheRecording"] == null)) {
                    return new Recording[0];
                }
                else {
                    return ((Recording[])(base.GetChildRows(this.Table.ChildRelations["ArtistOfTheRecording"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Genre : global::System.Data.DataRow {
            
            private GenresDataTable tableGenres;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Genre(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGenres = ((GenresDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Id {
                get {
                    return ((long)(this[this.tableGenres.IdColumn]));
                }
                set {
                    this[this.tableGenres.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableGenres.NameColumn]));
                }
                set {
                    this[this.tableGenres.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Track[] GetTracks() {
                if ((this.Table.ChildRelations["GenreOfTheTrack"] == null)) {
                    return new Track[0];
                }
                else {
                    return ((Track[])(base.GetChildRows(this.Table.ChildRelations["GenreOfTheTrack"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Label : global::System.Data.DataRow {
            
            private LabelsDataTable tableLabels;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Label(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLabels = ((LabelsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Id {
                get {
                    return ((long)(this[this.tableLabels.IdColumn]));
                }
                set {
                    this[this.tableLabels.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableLabels.NameColumn]));
                }
                set {
                    this[this.tableLabels.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recording[] GetRecordings() {
                if ((this.Table.ChildRelations["LabelOfTheRecording"] == null)) {
                    return new Recording[0];
                }
                else {
                    return ((Recording[])(base.GetChildRows(this.Table.ChildRelations["LabelOfTheRecording"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Recording : global::System.Data.DataRow {
            
            private RecordingsDataTable tableRecordings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Recording(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecordings = ((RecordingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Id {
                get {
                    return ((long)(this[this.tableRecordings.IdColumn]));
                }
                set {
                    this[this.tableRecordings.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableRecordings.TitleColumn]));
                }
                set {
                    this[this.tableRecordings.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ReleaseDate {
                get {
                    return ((global::System.DateTime)(this[this.tableRecordings.ReleaseDateColumn]));
                }
                set {
                    this[this.tableRecordings.ReleaseDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LabelId {
                get {
                    return ((long)(this[this.tableRecordings.LabelIdColumn]));
                }
                set {
                    this[this.tableRecordings.LabelIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ArtistId {
                get {
                    return ((long)(this[this.tableRecordings.ArtistIdColumn]));
                }
                set {
                    this[this.tableRecordings.ArtistIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Artist Artist {
                get {
                    return ((Artist)(this.GetParentRow(this.Table.ParentRelations["ArtistOfTheRecording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ArtistOfTheRecording"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Label Label {
                get {
                    return ((Label)(this.GetParentRow(this.Table.ParentRelations["LabelOfTheRecording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LabelOfTheRecording"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Track[] GetTracks() {
                if ((this.Table.ChildRelations["TrackOfTheRecording"] == null)) {
                    return new Track[0];
                }
                else {
                    return ((Track[])(base.GetChildRows(this.Table.ChildRelations["TrackOfTheRecording"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Review[] GetReviews() {
                if ((this.Table.ChildRelations["ReviewsOfTheRecording"] == null)) {
                    return new Review[0];
                }
                else {
                    return ((Review[])(base.GetChildRows(this.Table.ChildRelations["ReviewsOfTheRecording"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Review : global::System.Data.DataRow {
            
            private ReviewsDataTable tableReviews;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Review(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReviews = ((ReviewsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Id {
                get {
                    return ((long)(this[this.tableReviews.IdColumn]));
                }
                set {
                    this[this.tableReviews.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ReviewerId {
                get {
                    try {
                        return ((long)(this[this.tableReviews.ReviewerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'reviewerid\' in table \'Review\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReviews.ReviewerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RecordingId {
                get {
                    try {
                        return ((long)(this[this.tableReviews.RecordingIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'recordingid\' in table \'Review\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReviews.RecordingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Rating {
                get {
                    return ((int)(this[this.tableReviews.RatingColumn]));
                }
                set {
                    this[this.tableReviews.RatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Content {
                get {
                    try {
                        return ((string)(this[this.tableReviews.ContentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'review\' in table \'Review\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReviews.ContentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Reviewer Reviewer {
                get {
                    return ((Reviewer)(this.GetParentRow(this.Table.ParentRelations["ReviewerOfTheRecording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ReviewerOfTheRecording"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recording Recording {
                get {
                    return ((Recording)(this.GetParentRow(this.Table.ParentRelations["ReviewsOfTheRecording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ReviewsOfTheRecording"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReviewerIdNull() {
                return this.IsNull(this.tableReviews.ReviewerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReviewerIdNull() {
                this[this.tableReviews.ReviewerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordingIdNull() {
                return this.IsNull(this.tableReviews.RecordingIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordingIdNull() {
                this[this.tableReviews.RecordingIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContentNull() {
                return this.IsNull(this.tableReviews.ContentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContentNull() {
                this[this.tableReviews.ContentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Reviewer : global::System.Data.DataRow {
            
            private ReviewersDataTable tableReviewers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Reviewer(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReviewers = ((ReviewersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Id {
                get {
                    return ((long)(this[this.tableReviewers.IdColumn]));
                }
                set {
                    this[this.tableReviewers.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableReviewers.NameColumn]));
                }
                set {
                    this[this.tableReviewers.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Review[] GetReviews() {
                if ((this.Table.ChildRelations["ReviewerOfTheRecording"] == null)) {
                    return new Review[0];
                }
                else {
                    return ((Review[])(base.GetChildRows(this.Table.ChildRelations["ReviewerOfTheRecording"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Track : global::System.Data.DataRow {
            
            private TracksDataTable tableTracks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Track(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTracks = ((TracksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Id {
                get {
                    return ((long)(this[this.tableTracks.IdColumn]));
                }
                set {
                    this[this.tableTracks.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableTracks.TitleColumn]));
                }
                set {
                    this[this.tableTracks.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Duration {
                get {
                    return ((int)(this[this.tableTracks.DurationColumn]));
                }
                set {
                    this[this.tableTracks.DurationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long GenreId {
                get {
                    try {
                        return ((long)(this[this.tableTracks.GenreIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'genreid\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTracks.GenreIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ArtistId {
                get {
                    try {
                        return ((long)(this[this.tableTracks.ArtistIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'artistid\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTracks.ArtistIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RecordingId {
                get {
                    try {
                        return ((long)(this[this.tableTracks.RecordingIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'recordingid\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTracks.RecordingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recording Recording {
                get {
                    return ((Recording)(this.GetParentRow(this.Table.ParentRelations["TrackOfTheRecording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TrackOfTheRecording"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Genre Genre {
                get {
                    return ((Genre)(this.GetParentRow(this.Table.ParentRelations["GenreOfTheTrack"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["GenreOfTheTrack"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Artist Artist {
                get {
                    return ((Artist)(this.GetParentRow(this.Table.ParentRelations["ArtistOfTheTrack"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ArtistOfTheTrack"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenreIdNull() {
                return this.IsNull(this.tableTracks.GenreIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenreIdNull() {
                this[this.tableTracks.GenreIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtistIdNull() {
                return this.IsNull(this.tableTracks.ArtistIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtistIdNull() {
                this[this.tableTracks.ArtistIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordingIdNull() {
                return this.IsNull(this.tableTracks.RecordingIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordingIdNull() {
                this[this.tableTracks.RecordingIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ArtistChangeEvent : global::System.EventArgs {
            
            private Artist eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtistChangeEvent(Artist row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Artist Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GenreChangeEvent : global::System.EventArgs {
            
            private Genre eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenreChangeEvent(Genre row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Genre Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LabelChangeEvent : global::System.EventArgs {
            
            private Label eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelChangeEvent(Label row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Label Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RecordingChangeEvent : global::System.EventArgs {
            
            private Recording eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingChangeEvent(Recording row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Recording Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReviewChangeEvent : global::System.EventArgs {
            
            private Review eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReviewChangeEvent(Review row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Review Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReviewerChangeEvent : global::System.EventArgs {
            
            private Reviewer eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReviewerChangeEvent(Reviewer row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Reviewer Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TrackChangeEvent : global::System.EventArgs {
            
            private Track eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackChangeEvent(Track row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Track Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591